from .testbench import Testbench, asserteq
import os
import random
import string
from .programtestbench import ProgramTestbench
from .uart_sim import UARTSim

CLK_FREQ = 2500000
BAUD = 115200

os.system("make -C ../software/bootloader clean")
os.system("make -C ../software/bootloader all")

def test_bootloader():
    with open("../software/bootloader/build/bootloader-inst.hex", "r") as f:
        program = [int(line.strip(), 16) for line in f.readlines() if len(line.strip()) == 8]

    cpu = ProgramTestbench("test_bootloader", program=program, dmem_init=[], custom_params={"CLK_FREQ": CLK_FREQ, "UART_BAUD": BAUD})
    uart = UARTSim(cpu.tb.write_port("i_rx"), cpu.tb.read_port("o_tx"), CLK_FREQ, BAUD)
    cpu.tb.add_tick_callback(uart.update)

    data = [0xC8, 0x00, 0x00, 0x00, 0x37, 0x81, 0x00, 0x40, 0x6F, 0x00, 0x40, 0x08, 0x6F, 0x00, 0x00, 0x00, 0x13, 0x01, 0x01, 0xFF, 0x23, 0x26, 0x81, 0x00, 0x13, 0x04, 0x01, 0x01, 0x97, 0x07, 0x00, 0x20, 0x93, 0x87, 0x87, 0xFE, 0x83, 0xA7, 0x07, 0x00, 0x83, 0xA7, 0x07, 0x00, 0x13, 0x85, 0x07, 0x00, 0x03, 0x24, 0xC1, 0x00, 0x13, 0x01, 0x01, 0x01, 0x67, 0x80, 0x00, 0x00, 0x13, 0x01, 0x01, 0xFD, 0x23, 0x26, 0x11, 0x02, 0x23, 0x24, 0x81, 0x02, 0x13, 0x04, 0x01, 0x03, 0x23, 0x2E, 0xA4, 0xFC, 0xEF, 0xF0, 0x1F, 0xFC, 0x23, 0x26, 0xA4, 0xFE, 0x13, 0x00, 0x00, 0x00, 0xEF, 0xF0, 0x5F, 0xFB, 0x13, 0x07, 0x05, 0x00, 0x83, 0x27, 0xC4, 0xFE, 0xB3, 0x07, 0xF7, 0x40, 0x03, 0x27, 0xC4, 0xFD, 0xE3, 0xE6, 0xE7, 0xFE, 0x13, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00, 0x83, 0x20, 0xC1, 0x02, 0x03, 0x24, 0x81, 0x02, 0x13, 0x01, 0x01, 0x03, 0x67, 0x80, 0x00, 0x00, 0x13, 0x01, 0x01, 0xFF, 0x23, 0x26, 0x11, 0x00, 0x23, 0x24, 0x81, 0x00, 0x13, 0x04, 0x01, 0x01, 0x97, 0x07, 0x00, 0x20, 0x93, 0x87, 0xC7, 0xF6, 0x83, 0xA7, 0x07, 0x00, 0x03, 0xA7, 0x07, 0x00, 0x97, 0x07, 0x00, 0x20, 0x93, 0x87, 0xC7, 0xF5, 0x83, 0xA7, 0x07, 0x00, 0x13, 0x07, 0x17, 0x00, 0x23, 0xA0, 0xE7, 0x00, 0x13, 0x05, 0x80, 0x3E, 0xEF, 0xF0, 0x9F, 0xF7, 0x6F, 0xF0, 0x5F, 0xFD, 0x08, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x80, 0x83, 0x20]

    uart.send_all(data)

    while True:
        cpu.tick(50)

        while uart.get_recv_len() > 0:
            resp = uart.get_recv_data(1)
            print("{0:02X}".format(resp), end=" ", flush=True)

            if resp == 0x06:
                pass
            elif resp == 0x13:
                print("\nSuccess!")
                return
            else:
                print("\nFailed with error {0:02X}".format(resp))
                return

test_bootloader()
